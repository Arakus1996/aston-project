{"version":3,"file":"static/js/140.3a2904b2.chunk.js","mappings":"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","sources":["componetns/Forms/AuthInputs/EmailInput.tsx","componetns/Forms/AuthInputs/PasswordInput.tsx","componetns/Forms/config/validationConfig.ts","webpack://aston-project/./src/componetns/shared/ValidateInput/ValidateInput.module.css?18a7","componetns/shared/ValidateInput/ValidateInput.tsx","webpack://aston-project/./src/componetns/Forms/LoginForm/LoginForm.module.css?90f3","componetns/Forms/LoginForm/LoginForm.tsx","pages/Login/Login.tsx"],"sourcesContent":["import { ValidateInput } from '../../shared/ValidateInput/ValidateInput'\n\nimport type { PropsWithChildren } from 'react'\nimport type { InputType as Props } from '../../../types/sharedType'\n\nexport const EmailInput = (props: PropsWithChildren<Props>) => {\n  return <ValidateInput {...props} placeholder={props.placeholder || 'Email'} />\n}\n","import { ValidateInput } from '../../shared/ValidateInput/ValidateInput'\n\nimport type { PropsWithChildren } from 'react'\nimport type { InputType as Props } from '../../../types/sharedType'\n\nexport const PasswordInput = (props: PropsWithChildren<Props>) => {\n  return (\n    <ValidateInput\n      {...props}\n      placeholder={props.placeholder || 'Пароль'}\n      inputType='password'\n    />\n  )\n}\n","const textRequired = 'Поле обязательно для заполнения'\nconst confirmPassError = 'Пароли не совпадают'\nconst passError = 'Не надежный пароль'\nconst emailError = 'Не валидный Email'\nconst regPass = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/\nconst regEmail = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/i\n\nexport const validateEmail = {\n  required: textRequired,\n  pattern: {\n    value: regEmail,\n    message: emailError,\n  },\n}\n\nexport const validatePassword = {\n  required: textRequired,\n  pattern: {\n    value: regPass,\n    message: passError,\n  },\n}\n\nexport const validateConfirmPassword = (pwd: string | undefined) => {\n  return {\n    validate: (value: string) => value === pwd || confirmPassError,\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"ValidateInput_input__ruCGl\",\"inputError\":\"ValidateInput_inputError__1zYM8\",\"errorBlock\":\"ValidateInput_errorBlock__-ZdIh\"};","import style from './ValidateInput.module.css'\n\nimport type { PropsWithChildren } from 'react'\nimport type { InputType as Props } from '../../../types/sharedType'\n\nexport const ValidateInput = (props: PropsWithChildren<Props>) => {\n  return (\n    <>\n      <input\n        className={`${style.input} ${props.error && style.inputError}`}\n        value={props.value}\n        type={props.inputType}\n        placeholder={props.placeholder}\n        {...props.register(props.typeValidation, {\n          ...props.validation,\n          onChange: props.handleOnChange,\n        })}\n      />\n      <div className={style.errorBlock}>\n        {props.error && <p>{props.error.message}</p>}\n      </div>\n    </>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"registrationCssave\":\"LoginForm_registrationCssave__tEAlI\",\"lightForm\":\"LoginForm_lightForm__+WXrS\",\"btnForm\":\"LoginForm_btnForm__uGmlQ\",\"errorValidation\":\"LoginForm_errorValidation__uoXAB\",\"errorForm\":\"LoginForm_errorForm__UfCMc\",\"errorForm_message\":\"LoginForm_errorForm_message__iMXjj\"};","import { useForm } from 'react-hook-form'\nimport { PropsWithChildren } from 'react'\n\nimport { Button } from '../../shared/Button/Button'\nimport { EmailInput } from '../AuthInputs/EmailInput'\nimport { PasswordInput } from '../AuthInputs/PasswordInput'\nimport { validateEmail } from '../config/validationConfig'\nimport { useChekTheme } from '../../../hooks/useCheckTheme'\n\nimport style from './LoginForm.module.css'\n\nimport type { InputEvent } from '../../../types/sharedType'\nimport type { AuthType as Props } from '../types/types'\n\nexport const LoginForm = (props: PropsWithChildren<Props>) => {\n  const theme = useChekTheme(style.lightForm)\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm({\n    mode: 'onBlur',\n  })\n\n  const onSubmit = handleSubmit(() => {\n    props.onAuth()\n  })\n\n  const handleOnChangeEmail = (e: InputEvent) => {\n    props.setEmail(e.target.value)\n  }\n\n  const handleOnChangePass = (e: InputEvent) => {\n    props.setPassword(e.target.value)\n  }\n\n  return (\n    <div className={style.registrationCssave}>\n      <form onSubmit={onSubmit} className={theme}>\n        <h3 className={style.textCenter}>Войти</h3>\n        <EmailInput\n          register={register}\n          error={errors.email}\n          typeValidation='email'\n          validation={validateEmail}\n          value={props.email}\n          handleOnChange={handleOnChangeEmail}\n        />\n        <PasswordInput\n          register={register}\n          error={errors.password}\n          typeValidation='password'\n          value={props.password}\n          handleOnChange={handleOnChangePass}\n        />\n        <div className={style.errorForm}>\n          <p className={style.errorForm_message}>{props.error}</p>\n        </div>\n        <div className={style.btnForm}>\n          <Button text='Вход в аккаунт' />\n        </div>\n      </form>\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport { LoginForm } from '../../componetns/Forms/LoginForm/LoginForm'\nimport { useAppDispatch, useAppSelector } from '../../store/hooks'\nimport { signInUser } from '../../store/middleware/thunk/userThunk'\n\nexport const Login = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const dispatch = useAppDispatch()\n  const authError = useAppSelector(state => state.userReducer.error)\n\n  const onAuth = () => {\n    dispatch(signInUser({ email, password }))\n  }\n\n  return (\n    <LoginForm\n      email={email}\n      password={password}\n      setEmail={setEmail}\n      setPassword={setPassword}\n      onAuth={onAuth}\n      error={authError}\n    />\n  )\n}\n"],"names":["EmailInput","props","_jsx","ValidateInput","placeholder","PasswordInput","inputType","textRequired","validateEmail","required","pattern","value","message","validatePassword","validateConfirmPassword","pwd","validate","_jsxs","_Fragment","children","className","concat","style","error","type","register","typeValidation","validation","onChange","handleOnChange","LoginForm","theme","useChekTheme","lightForm","formState","errors","handleSubmit","useForm","mode","onSubmit","onAuth","registrationCssave","textCenter","email","e","setEmail","target","password","setPassword","errorForm","errorForm_message","btnForm","Button","text","Login","useState","dispatch","useAppDispatch","authError","useAppSelector","state","userReducer","signInUser"],"sourceRoot":""}